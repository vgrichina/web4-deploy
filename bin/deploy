#!/usr/bin/env node

const { Web3Storage } = require('web3.storage')

const CID = require('cids');
const { connect, keyStores, Account, KeyPair, transactions } = require('near-api-js');

const fs = require('fs');

#!/usr/bin/env node

const { Web3Storage } = require('web3.storage')
const CID = require('cids');
const { connect, keyStores, Account, KeyPair, transactions } = require('near-api-js');
const fs = require('fs');
const { CarReader } = require('@ipld/car');
const { packToFs } = require('ipfs-car/pack/fs');
const { deployNEARFS } = require('../src/util/nearfs.js');
const { deployContract } = require('../src/util/deploy-contract.js');
const { checkIPFSGateways } = require('../src/util/gateway-check.js');
const meow = require('meow');

async function main(argv) {
    const cli = meow(`
    Usage:

        web4-deploy <src-directory> <destination-account.near>

    Options:

        --deploy-contract [contract-name]   Deploy contract to the account.
            If contract name is not provided, default contract gonna be deployed: https://github.com/vgrichina/web4-min-contract

        --network [network]                NEAR network ID. Default: mainnet for .near accounts, testnet otherwise.
            NEAR_ENV and NODE_ENV environment variable can be used as well if not specified explicitly.

        --nearfs                           Deploy to NEARFS instead of IPFS. Enabled by default.
            See more details on https://github.com/vgrichina/nearfs

        --web3-storage                     Use web3.storage for IPFS pinning.
        --yes                              Skip confirmation prompt.

        --help                             Show this help message.

        --version                          Show package version.
    `, {
        flags: {
            deployContract: {
                type: 'string',
            },
            network: {
                type: 'string',
            },
            nearfs: {
                type: 'boolean',
                default: true,
            },
            web3Storage: {
                type: 'boolean',
            },
            yes: {
                type: 'boolean',
            },
            help: {
                type: 'boolean',
            },
            version: {
                type: 'boolean',
            }
        },
        allowUnknownFlags: false,
        argv
    });

    if (cli.input.length !== 2 || cli.flags.help) {
        cli.showHelp(1);
    }

    return deploy(cli);
}

if (require.main === module) {
    main(process.argv);
} else {
    module.exports = { main };
}

async function deploy(cli) {
    const WEB3_TOKEN = process.env.WEB3_TOKEN;
    if (cli.flags.web3Storage && !WEB3_TOKEN) {
        console.error(`
You need to set WEB3_TOKEN environment variable to allow IPFS pinning.

WEB3_TOKEN environment variable needs to be set to your web3.storage API token.
See https://web3.storage/docs/how-tos/generate-api-token/ for more information.

`);
    }


    const [ dir, accountId ] = cli.input;

    const NEAR_SIGNER_ACCOUNT = process.env.NEAR_SIGNER_ACCOUNT || accountId;
    const NEAR_SIGNER_KEY = process.env.NEAR_SIGNER_KEY;

    const network = cli.flags.network || process.env.NEAR_ENV || process.env.NODE_ENV ||
        (accountId.endsWith('.near') ? 'mainnet' : 'testnet');

    async function connectNEAR() {
        const config = require('../src/config')(network);
        const keyStore = NEAR_SIGNER_KEY ? new keyStores.InMemoryKeyStore() : new keyStores.UnencryptedFileSystemKeyStore(`${process.env.HOME}/.near-credentials`);
        if (NEAR_SIGNER_KEY) {
            keyStore.setKey(config.networkId, NEAR_SIGNER_ACCOUNT, KeyPair.fromString(NEAR_SIGNER_KEY));
        }
        const near = await connect({
            ...config,
            keyStore
        })
        const account = new Account(near.connection, NEAR_SIGNER_ACCOUNT);
        return { config, keyStore, near, account };
    }

    const { config, account } = await connectNEAR();

    console.log('Packaging files into a CAR file...');
    const tmpDir = fs.mkdtempSync('web4-deploy-');
    const carFile = `${tmpDir}/deploy.car`;
    // NOTE: packToBlob seems to pack raw input string instead of files? TODO: Figure out how to avoid tmp file
    const { root } = await packToFs({ input: dir, output: carFile, wrapWithDirectory: false });
    const carBuffer = Buffer.from(fs.readFileSync(carFile));
    fs.rmSync(tmpDir, { recursive: true });

    const carReader = await CarReader.fromBytes(carBuffer);


    if (cli.flags.web3Storage) {
        console.log('Uploading CAR file to web3.storage...')
        const storage = new Web3Storage({ token: WEB3_TOKEN })
        await storage.putCar(carReader);
    }

    if (cli.flags.nearfs) {
        let gatewayUrl = process.env.NEARFS_GATEWAY_URL;
        if (network === 'mainnet') {
            gatewayUrl = gatewayUrl || 'https://ipfs.web4.near.page';
        } else if (network === 'testnet') {
            gatewayUrl = gatewayUrl || 'https://ipfs.web4.testnet.page';
        } else if (!gatewayUrl) {
            console.error('NEARFS_GATEWAY_URL environment variable needs to be set for custom networks.');
            process.exit(1);
        }
        await deployNEARFS(account, carBuffer, cli, { gatewayUrl });
    }

    if (!cli.flags.nearfs && !cli.flags.web3Storage) {
        console.error('No IPFS pinning service configured. Use one of following options: --nearfs, --web3-storage');
        process.exit(1);
    }

    const rootCID32 = new CID(root.toString()).toV1().toString('base32');
    const cids = [];
    for await (const cid of carReader.cids()) {
        cids.push(new CID(cid.toString()).toV1().toString('base32'));
    }

    if (cli.flags.web3Storage) {
        await checkIPFSGateways(cids);
    }

    if (cli.flags.deployContract != undefined) {
        await deployContract(account, cli.flags.deployContract);
    }

    const url = `ipfs://${rootCID32}`;
    console.log('\nUpdating static url', url);

    try {
        const { transaction: { hash } } = await account.functionCall(accountId, 'web4_setStaticUrl', { url });
        console.log('Updated in transaction:', `${config.explorerUrl}/transactions/${hash}`);

        const websiteUrl = accountId.match(/\.(near|testnet)$/) &&  `https://${accountId.replace(/^web4./, '')}.page`;
        if (websiteUrl) {
            console.log('\nVisit your website at:', websiteUrl);
        } else {
            console.log('\nYou\'ll need to run your own Web4 gateway to access', accountId);
            // TODO: Command-line to run gateway
        }
    } catch (e) {
        if (e.message.includes('Cannot find contract code for account')) {
            console.log(`
Account ${account.accountId} doesn't have a contract deployed yet.
Please deploy contract first using --deploy-contract option.

Example:

    web4-deploy ${dir} ${account.accountId} --deploy-contract ./out/main.wasm


You can use default contract as well:

    web4-deploy ${dir} ${account.accountId} --deploy-contract

This going to deploy mimimal contract which just sets static url to the one provided.
See https://github.com/vgrichina/web4-min-contract.

            `);
            process.exit(1);
        }

        if (e.message.includes('Contract method is not found')) {
            console.log(`
Account ${account.accountId} doesn't have web4_setStaticUrl method in it's contract.

Please add web4_setStaticUrl method to your contract and try deploying again.

Alternatively, you can use default contract as well:

*** WARNING: this gonna overwrite your existing contract ***

    web4-deploy ${dir} ${account.accountId} --deploy-contract

This going to deploy mimimal contract which just sets static url to the one provided.
See https://github.com/vgrichina/web4-min-contract.

            `);
            process.exit(1);
        }

        if (e.message.includes('Can not sign transactions for account')) {
            console.log(`
Can not sign transactions for account ${account.accountId} on network ${network}.

You need to have keys for ${account.accountId} in your key store at ~/.near-credentials/${network}/${account.accountId}.json
Usually this means you need to login to your account using near-cli:

    NEAR_ENV=${network} near login

Alternatively you can use NEAR_SIGNER_ACCOUNT and NEAR_SIGNER_KEY environment variables to specify account and key to use directly.

            `);
            process.exit(1);
        }

        throw e;
    }
}
